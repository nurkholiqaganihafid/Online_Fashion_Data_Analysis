# -*- coding: utf-8 -*-
"""Online_Fashion_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nbbdpHQdAnUBgQ4TN7n9tGbkV8ayP8zy

# PERSONAL DATA

### **Nurkholiq Agani Hafid**

Instagram: [mecoliqnur](https://www.instagram.com/mecoliqnur/)

Portfolio:
* [LinkedIn](https://www.linkedin.com/in/nurkholiqaganihafid/)
* [Github](https://github.com/nurkholiqaganihafid)
* [Tableau Public](https://public.tableau.com/app/profile/nurkholiq.agani.hafid/vizzes)

# DESCRIPTION

- ***Online Fashion Analysis*** merupakan proyek analisis data yang menggunakan data penjualan dari perusahaan fashion bernama **Dicoding Collection** **(DiCo)**. **DiCo** adalah perusahaan online yang memproduksi dan menjual berbagai item fashion. DiCo menyadari pentingnya data dalam mengembangkan bisnis, sehingga mereka menyimpan semua history penjualan, informasi produk, dan data pelanggan dalam sebuah database.

- **Tujuan** dari proyek ini adalah untuk mengevaluasi performa penjualan perusahaan, memahami produk fashion yang paling banyak dan paling sedikit terjual, serta mendapatkan pemahaman yang lebih dalam tentang demografi pelanggan. Dengan memahami pelanggan secara lebih baik, DiCo dapat membuat strategi *campaign* yang lebih efisien.

- Database ini terdiri dari empat tabel, antara lain **customers**, **orders**, **products**, dan **sales**. [Legend](https://github.com/nurkholiqaganihafid/Online_Fashion_Data_Analysis/blob/main/dataset/Legend.txt)

- Dataset: [DicodingCollection](https://github.com/dicodingacademy/dicoding_dataset/tree/main/DicodingCollection)

Pertanyaan bisnis yang akan dijawab melalui analisis data ini antara lain:

1. Bagaimana performa penjualan dan revenue perusahaan dalam beberapa bulan terakhir?
2. Produk apa yang paling banyak dan paling sedikit terjual?
3. Bagaimana demografi pelanggan yang dimiliki perusahaan?
4. Kapan terakhir kali pelanggan melakukan transaksi?
5. Seberapa sering seorang pelanggan melakukan pembelian dalam beberapa bulan terakhir?
6. Berapa banyak uang yang dihabiskan oleh pelanggan dalam beberapa bulan terakhir?

# DATA WRANGLING

## Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_columns', None)
plt.rc('axes', grid=True)

# %matplotlib inline

"""## Gathering Data

### Customers
"""

customers_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/customers.csv')
customers_df.head()

"""### Orders"""

orders_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/orders.csv')
orders_df.head()

"""### Product"""

product_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/products.csv')
product_df.head()

"""### Sales"""

sales_df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/DicodingCollection/sales.csv')
sales_df.head()

"""## Assessing Data

### Customers
"""

customers_df.info()

customers_df.isnull().sum()

"""- Output di atas menunjukkan bahwa terdapat 18 missing values pada kolom `gender`."""

print('Number of duplicates in customer data: ', customers_df.duplicated().sum())

customers_df.describe()

"""- Output di atas terdapat inaccurate value pada nilai maksimum pada kolom `age`: 700.00

### Orders
"""

orders_df.info()

"""- Tidak ada missing value pada data `orders_df`
- Namun, terdapat kesalahan tipe data pada kolom `order_date` dan `delivery_date`
- Kedua kolom tersebut harusnya tipe data **datetime**, bukan **object**
"""

print('Number of duplicates in order data: ', orders_df.duplicated().sum())

orders_df.describe()

"""- Tidak ada nilai yang aneh dalam output `orders_df` di atas

### Product
"""

product_df.info()

print('Number of duplicates in product data: ', product_df.duplicated().sum())

product_df.describe()

"""### Sales"""

sales_df.info()

sales_df.isnull().sum()

"""- Output di atas menunjukkan bahwa terdapat 19 missing values pada kolom `total_price`."""

print('Number of duplicates in sale data: ', sales_df.duplicated().sum())

sales_df.describe()

"""- Hasil di atas menunjukkan bahwa tidak ada data yang aneh

## Cleaning Data

### Customers

#### Drop duplicate data
"""

customers_df.drop_duplicates(inplace=True)

print('Number of duplicates in customer data: ', customers_df.duplicated().sum())

"""#### Handling missing values"""

# Melihat data yang mengandung missing value
customers_df[customers_df.gender.isnull()]

"""Meskipun baris data tersebut memiliki missing value, tetap terdapat banyak informasi penting yang dapat diekstraksi. Oleh karena itu, dalam kasus ini, kita akan menggunakan metode **imputasi** untuk mengisi nilai yang hilang."""

customers_df.gender.value_counts()

customers_df.gender.fillna(value='Prefer not to say', inplace=True)

customers_df.isnull().sum()

customers_df.gender.value_counts()

"""#### Handling inaccurate values"""

customers_df[customers_df.age == customers_df.age.max()]

"""Dari data tersebut, dapat diasumsikan bahwa nilai yang tidak akurat disebabkan oleh *human error* yang menyebabkan nilai nol yang berlebihan. Oleh karena itu, akan diganti dengan nilai **70**."""

customers_df.age.replace(customers_df.age.max(), 70, inplace=True)

customers_df[customers_df.age == customers_df.age.max()]

"""Ternyata masih ada *invalid value* lain yang terdapat dalam kolom age.

Kemungkinan penyebab kesalahan ini sama dengan sebelumnya, yaitu *human error*  yang menyebabkan nilai nol yang berlebihan. Untuk mengatasi hal ini, kita akan menggantinya dengan nilai **50**.
"""

customers_df.age.replace(customers_df.age.max(), 50, inplace=True)

customers_df[customers_df.age == customers_df.age.max()]

customers_df.describe()

"""Dari hasil tersebut, terlihat bahwa kolom `age` memiliki nilai maksimum yang masuk akal. Selain itu, jika diperhatikan, nilai mean dan standar deviasi juga berubah setelah kita menangani nilai yang tidak akurat.

### Orders

- Dalam proses assessing data sebelumnya, telah diketahui bahwa terdapat kesalahan dalam tipe data untuk kolom `order_date` dan `delivery_date`.
- Kedua kolom ini akan diganti dengan tipe data `datetime`.
"""

datetime_columns = ['order_date', 'delivery_date']

for column in datetime_columns:
    orders_df[column] = pd.to_datetime(orders_df[column])

orders_df.info()

"""### Product

- Dalam proses assessing data sebelumnya, bahwa terdapat 6 data yang duplicate pada `product_df`.
- Maka data duplicate ini akan didrop.
"""

product_df.drop_duplicates(inplace=True)

print('Number of duplicates in product data: ', product_df.duplicated().sum())

"""### Sales

Dari hasil penilaian data sebelumnya, dapat disimpulkan bahwa terdapat 19 nilai yang hilang (missing value) pada kolom `total_price`.
"""

sales_df[sales_df.total_price.isnull()]

sales_df.head(3)

"""Dari tampilan data tersebut, kita dapat mengamati bahwa nilai `total_price` diperoleh dengan mengalikan `price_per_unit` dengan `quantity`. Pola ini dapat kita gunakan untuk menangani nilai yang hilang (missing value) pada kolom `total_price`."""

sales_df['total_price'] = sales_df['price_per_unit'] * sales_df['quantity']

sales_df.isnull().sum()

sales_df[sales_df['sales_id'] == 121]

"""# EXPLORATORY DATA ANALYSIS

## Customers
"""

customers_df.describe(include='all')

customers_df.groupby(by='gender').agg({
    'customer_id': 'nunique',
    'age': ['max', 'min', 'mean', 'std']
})

customers_df.groupby(by='city').customer_id.nunique().sort_values(ascending=False)

customers_df.groupby(by='state').customer_id.nunique().sort_values(ascending=False)

"""- Terlihat bahwa distribusi pelanggan cukup merata di setiap city dan state.
- City dengan jumlah pelanggan terbanyak adalah East Aidan, East Sophia, dan New Ava, masing-masing memiliki tiga pelanggan.
- Selain itu, state dengan jumlah pelanggan terbanyak adalah South Australia.

## Orders
"""

orders_df.head(2)

"""Membuat sebuah kolom baru untuk memuat waktu pengiriman tiap order."""

delivery_time = orders_df['delivery_date'] - orders_df['order_date']
delivery_time

delivery_time = delivery_time.apply(lambda x: x.total_seconds())
delivery_time

# Selanjutnya diubah ke dalam satuan hari (dibagi 86400)
orders_df['delivery_time'] = round(delivery_time/86_400)

orders_df.head(2)

orders_df.describe(include='all')

"""- Dari output tersebut, dapat disimpulkan bahwa rata-rata waktu pengiriman adalah **14 hari**, dengan nilai maksimum **27 hari** dan nilai minimum **1 hari**.

## Orders and Customers

- Pada data orders_df terdapat kolom yang berisi informasi tentang `customer_id` pelanggan yang pernah melakukan order. Informasi ini dapat digunakan untuk mengidentifikasi pelanggan yang **belum** pernah melakukan order.
- Untuk melakukan hal ini, kita dapat membuat kolom baru bernama `status` pada data `customers_df`.
- Kolom `status` ini akan memiliki nilai `"Active"` untuk pelanggan yang pernah melakukan order setidaknya sekali.
- Sebaliknya, kolom `status` akan memiliki nilai `"Non Active"` untuk pelanggan yang belum pernah melakukan order sama sekali.
"""

customer_id_in_orders_df = orders_df.customer_id.tolist()
customers_df['status'] = customers_df['customer_id'].apply(
    lambda x: 'Active' if x in customer_id_in_orders_df else 'Non Active'
)
customers_df.sample(5)

customers_df.groupby(by='status').customer_id.count()

"""Berdasarkan pivot table di atas, terlihat bahwa terdapat sejumlah pelanggan yang belum pernah melakukan transaksi sebelumnya. Hal ini merupakan suatu kabar buruk karena hampir **30%** dari total pelanggan yang belum pernah melakukan order sebelumnya.

### Merge

Melakukan proses merge untuk memperoleh informasi terkait kedua data tersebut.
"""

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how='left',
    left_on='customer_id',
    right_on='customer_id'
)
orders_customers_df.head()

"""### Number of orders by city"""

orders_customers_df.groupby(by='city').order_id.nunique().sort_values(ascending=False).reset_index().head(10)

"""- Kota Jordanside dan New Ava merupakan dua kota yang memiliki jumlah order terbanyak."""

orders_customers_df[orders_customers_df['city'] == 'Jordanside']

"""### Number of orders by state"""

orders_customers_df.groupby(by='state').order_id.nunique().sort_values(ascending=False).reset_index()

"""- South Australia merupakan state yang paling banyak melakukan order.

### Number of orders by gender
"""

orders_customers_df.groupby(by='gender').order_id.nunique().sort_values(ascending=False).reset_index()

"""- Berdasarkan output di atas bahwa kebanyakan order dilakukan oleh pelanggan yang berjenis kelamin `prefer not to say`.

### Number of orders by age group

- Mengeksplorasi jumlah order berdasarkan kelompok usia.
- Untuk melakukan hal ini, perlu mendefinisikan sebuah kolom baru bernama `age_group`.
- Kolom ini akan membantu kita dalam mengelompokkan pelanggan ke dalam tiga kelompok, yaitu ***youth***, ***adults***, dan ***seniors***.
"""

orders_customers_df['age_group'] = orders_customers_df.age.apply(
    lambda x: 'Youth' if x <= 24 else (
        'Seniors' if x > 64 else 'Adults'
    )
)

orders_customers_df.groupby(by='age_group').order_id.nunique().sort_values(ascending=False).reset_index()

"""- Pelanggan yang paling banyak melakukan order berasal dari kelompok usia `Adults`.

## Product and Sales
"""

product_df.describe(include='all')

"""- Harga barang yang dijual berkisar antara **90** hingga **119** dolar."""

sales_df.describe(include='all')

"""- Pada setiap transaksi pelanggan paling banyak membeli tiga buah item (`quantity`) dalam satu jenis produk dengan total harga sebesar **357** dolar."""

product_df.sort_values(by='price', ascending=False)

"""- Dari hasil output di atas bahwa produk termahal yaitu item jaket bernama Parka dan yang termurah bernama Bomber."""

product_df.groupby(by='product_type').agg({
    'product_id': 'nunique',
    'quantity': 'sum',
    'price': ['min', 'max']
})

product_df.groupby(by='product_name').agg({
    'product_id': 'nunique',
    'quantity': 'sum',
    'price': ['min', 'max']
})

"""### Merge

Menggabungkan tabel `product_df` dan `sales_df` untuk melihat produk yang paling laris.
"""

sales_product_df = pd.merge(
    left=sales_df,
    right=product_df,
    how='left',
    left_on='product_id',
    right_on='product_id'
)
sales_product_df.head()

"""Hasil dari proses merge di atas menunjukkan adanya perbedaan antara nilai `price_per_unit` dan `price`. Perbedaan ini dapat disebabkan oleh adanya **potongan harga**, **biaya operasional**, dan **biaya lainnya yang diperhitungkan**."""

sales_product_df.groupby(by='product_type').agg({
    'sales_id': 'nunique',
    'quantity_x': 'sum',
    'total_price': 'sum'
})

"""- `Trousers` merupakan tipe produk yang paling laris dengan `sales_id` 1683 dan `quantity_x` 3360.
- Akan tetapi, jika dilihat berdasarkan **revenue** (`total_price`) yang diterima, `Jacket` merupakan tipe produk yang paling banyak menyumbang **revenue perusahaan**.
"""

sales_product_df.groupby(by='product_name').agg({
    'sales_id': 'nunique',
    'quantity_x': 'sum',
    'total_price': 'sum'
}).sort_values(by='total_price', ascending=False)

"""- Produk `Denim` merupakan produk yang paling laris dan juga paling banyak menyumbang **revenue** terhadap perusahaan.

## Explore all_df Data

- Tujuan dari langkah ini adalah untuk menganalisis pola pembelian berdasarkan **demografi** pelanggan.
- Untuk itu, kita akan membuat sebuah DataFrame baru yang akan kita sebut sebagai `all_df`.
- DataFrame ini akan digunakan untuk menggabungkan (`merge`) dan menyimpan semua informasi dari keempat tabel yang dimiliki.
"""

all_df = pd.merge(
    left=sales_product_df,
    right=orders_customers_df,
    how='left',
    left_on='order_id',
    right_on='order_id'
)
all_df.head()

all_df.info()

all_df.groupby(by=['state', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})

"""- Pivot table di atas memberikan gambaran mengenai preferensi pengguna terhadap `product_type` berdasarkan `state`.
- Tipe produk `Jacket` memiliki penjualan terbanyak di state **New South Wales**, **Queensland**, dan **Tasmania**,.
"""

all_df.groupby(by=['gender', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})

"""- Total penjualan tertinggi terjadi pada kategori `Prefer not to say` dengan total harga sebesar **255.085** dolar pada `product_type` **Jacket**."""

all_df.groupby(by=['age_group', 'product_type']).agg({
    'quantity_x': 'sum',
    'total_price': 'sum'
})

"""- Total penjualan tertinggi terjadi pada kelompok usia `Adults` dengan total harga sebesar **245.055** dollar.

# DATA VISUALIZATION

## 1st Question

- Bagaimana Performa Penjualan dan Revenue Perusahaan dalam Beberapa Bulan Terakhir?

1. Tujuannya adalah untuk melakukan resampling data `order_date` menjadi **bulanan**.
2. Selain itu, juga akan melakukan agregasi terhadap data tersebut.
3. Agregasi ini bertujuan untuk mendapatkan informasi terkait `jumlah order` dan `total revenue` yang diperoleh **tiap bulan**.
"""

monthly_orders_df = all_df.resample(rule='M', on='order_date').agg({
    'order_id': 'nunique',
    'total_price': 'sum'
})
monthly_orders_df

monthly_orders_df.index = monthly_orders_df.index.strftime('%B')
monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df

monthly_orders_df.rename(columns={
    'order_id': 'order_count',
    'total_price': 'revenue'
}, inplace=True)

monthly_orders_df.head()

sns.set_style('darkgrid')
plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df['order_date'],
    monthly_orders_df['order_count'],
    marker='o',
    linewidth=2,
    color='#72BCD4'
)
plt.title('Number of Orders per Month (2021)', fontsize=16)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

for i in range(len(monthly_orders_df)):
    plt.text(
        monthly_orders_df['order_date'][i],
        monthly_orders_df['order_count'][i] + 0.5,
        monthly_orders_df['order_count'][i],
        ha='left',
        va='bottom',
        fontsize=8
    )

"""- Berdasarkan visualisasi di atas, dapat diamati bahwa bulan dengan jumlah order **terbanyak** adalah **Maret**.
- Selain itu, terdapat **penurunan** yang signifikan dalam jumlah order pada bulan **Februari, April, Mei, dan Oktober**.
"""

plt.figure(figsize=(10, 5))
plt.plot(
    monthly_orders_df['order_date'],
    monthly_orders_df['revenue'],
    marker='o',
    linewidth=2,
    color='#72BCD4'
)
plt.title('Total Revenue per Month (2021)', fontsize=16)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

for i in range(len(monthly_orders_df)):
    plt.text(
        monthly_orders_df['order_date'][i],
        monthly_orders_df['revenue'][i] + 500,
        monthly_orders_df['revenue'][i],
        ha='left',
        va='bottom',
        fontsize=8

    )

"""- Terdapat **penurunan** yang signifikan dalam jumlah order pada bulan **Februari, April, Mei, dan Oktober.**
- Penurunan ini berdampak pada pendapatan (`revenue`) perusahaan.
- Untuk mengetahui penyebab penurunan tersebut, perlu mempertimbangkan analisis lebih lanjut terkait beberapa faktor seperti keberadaan kompetitor, kampanye pemasaran, dan lain sebagainya.

## 2nd Question

- Produk Apa yang Paling Banyak dan Paling Sedikit Terjual?

Tujuan dari pertanyaan ini adalah untuk mengidentifikasi produk dengan penjualan **terbanyak** dan **paling sedikit**.
"""

sum_order_items_df = all_df.groupby(by='product_name').quantity_x.sum().sort_values(ascending=False).reset_index()
sum_order_items_df.head(len(sum_order_items_df))

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ['#72BCD4', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3']

# Plot pertama
sns.barplot(
    x='quantity_x',
    y='product_name',
    data=sum_order_items_df.head(5),
    palette=colors,
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title('Best Performing Product', loc='center', fontsize=15)
ax[0].tick_params(axis='y', labelsize=12)

for i in range(len(sum_order_items_df.head(5))):
    ax[0].text(
        sum_order_items_df['quantity_x'].iloc[i] + 4,
        i,
        sum_order_items_df['quantity_x'].iloc[i],
        va='center',
        fontsize=12
    )

# Plot kedua
asc_sum_order = sum_order_items_df.sort_values(
    by='quantity_x', ascending=True
).head(5)

sns.barplot(
    x='quantity_x',
    y='product_name',
    data=asc_sum_order,
    palette=colors,
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position('right')
ax[1].yaxis.tick_right()
ax[1].set_title('Worst Performing Product', loc='center', fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

for i, value in enumerate(asc_sum_order['quantity_x']):
    ax[1].text(
        value + 11,
        i,
        value,
        va='center',
        fontsize=12
    )

plt.suptitle('Best and Worst Performing Product by Number of Sales', fontsize=20)

"""- Berdasarkan gambar di atas, terlihat bahwa produk **Denim** memiliki penjualan yang **paling tinggi**.
- Sebaliknya, produk **Mandarin Collar** memiliki penjualan yang **paling rendah.**

## 3rd Question

- Bagaimana Demografi Pelanggan yang Kita Miliki?

Tujuan dari pertanyaan ini adalah untuk menyimpan informasi terkait jumlah pelanggan untuk demografi tertentu, seperti gender, state, dan sebagainya.

### By gender
"""

bygender_df = all_df.groupby(by='gender').customer_id.nunique().reset_index()
bygender_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

bygender_df

desc_bygender_df = bygender_df.sort_values(by='customer_count', ascending=False)

plt.figure(figsize=(10, 5))

sns.barplot(
    data=desc_bygender_df,
    y='customer_count',
    x='gender',
    palette=colors
)
plt.title('Number of Customer by Gender', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)

for i, value in enumerate(desc_bygender_df['customer_count']):
    plt.text(
        i,
        value + 5,
        value,
        ha='center'
    )

"""- Dari hasil plot di atas, bahwa sebagian besar pelanggan tidak mengungkapkan informasi tentang gender mereka.

### By age
"""

byage_df = all_df.groupby(by='age_group').customer_id.nunique().reset_index()
byage_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

byage_df

plt.figure(figsize=(10, 5))
colors_ = ['#D3D3D3', '#72BCD4', '#D3D3D3']

ax = sns.barplot(
    data=byage_df,
    y='customer_count',
    x='age_group',
    order=['Youth', 'Adults', 'Seniors'],
    palette=colors_
)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                xytext=(0, 1),
                textcoords='offset points',
                ha='center', va='bottom')

plt.title('Number of Customer by Age', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)

"""- Dari plot di atas, bahwa mayoritas pelanggan  adalah kelompok usia dewasa (adults).

### By state
"""

bystate_df = all_df.groupby(by='state').customer_id.nunique().reset_index()
bystate_df.rename(columns={
    'customer_id': 'customer_count'
}, inplace=True)

bystate_df

colors_ = ['#72BCD4', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3', '#D3D3D3']
desc_bystate_df = bystate_df.sort_values(by='customer_count', ascending=False)

plt.figure(figsize=(10, 5))
sns.barplot(
    data=desc_bystate_df,
    x='customer_count',
    y='state',
    palette=colors_
)
plt.title('Number of Customer by States', loc='center', fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)

for i, value in enumerate(desc_bystate_df['customer_count']):
    plt.text(
        x=value + 1,
        y=i,
        s=value,
        va='center',
    )

"""- Berdasarkan visualisasi di atas, bahwa pelanggan yang paling banyak berasal dari negara bagian **South Australia**.

## RFM Analysis

Untuk menjawab tiga pertanyaan analisis terakhir, dapat digunakan teknik analisis yaitu RFM analysis. RFM analysis adalah metode segmentasi pelanggan berdasarkan tiga parameter yaitu *recency*, *frequency*, dan *monetary*.
- Recency: parameter yang digunakan untuk melihat kapan terakhir seorang pelanggan melakukan transaksi.
- Frequency: parameter ini digunakan untuk mengidentifikasi seberapa sering seorang pelanggan melakukan transaksi.
- Monetary: parameter terakhir ini digunakan untuk mengidentifikasi seberapa besar revenue yang berasal dari pelanggan tersebut.
"""

rfm_df = all_df.groupby(by='customer_id', as_index=False).agg({
    'order_date': 'max', # mengambil tanggal order terakhir
    'order_id': 'nunique', # menghitung jumlah order
    'total_price': 'sum' # menghitung jumlah revenue yang dihasilkan
})

rfm_df

rfm_df.columns = ['customer_id', 'max_order_timestamp', 'frequency', 'monetary']
rfm_df.head(2)

# menghitung kapan terakhir pelanggan melakukan transaksi (hari)
rfm_df['max_order_timestamp'] = rfm_df['max_order_timestamp'].dt.date
recent_date = orders_df['order_date'].dt.date.max()
rfm_df['recency'] = rfm_df['max_order_timestamp'].apply(
    lambda x: (recent_date - x).days
)

rfm_df.drop('max_order_timestamp', axis=1, inplace=True)
rfm_df.head()

asc_recency_rfm_df = rfm_df.sort_values(by="recency", ascending=True).head(5)
asc_recency_rfm_df

colors = ['#72BCD4']

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(30, 6))

# Plot pertama
asc_recency_rfm_df = rfm_df.sort_values(by='recency', ascending=True).head(5)
sns.barplot(
    y='recency',
    x='customer_id',
    data=asc_recency_rfm_df,
    palette=colors,
    order=asc_recency_rfm_df['customer_id'],
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title('By Recency (days)', loc='center', fontsize=18, pad=10)
ax[0].tick_params(axis ='x', labelsize=15)

for i, value in enumerate(asc_recency_rfm_df['recency']):
    ax[0].text(
        x=i,
        y=value + 0.02,
        s=value,
        ha='center',
    )

# Plot kedua
desc_frequency_rfm_df = rfm_df.sort_values(by='frequency', ascending=False).head(5)
sns.barplot(
    y='frequency',
    x='customer_id',
    data=desc_frequency_rfm_df,
    palette=colors,
    order=desc_frequency_rfm_df['customer_id'],
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title('By Frequency', loc='center', fontsize=18, pad=10)
ax[1].tick_params(axis='x', labelsize=15)

for i, value in enumerate(desc_frequency_rfm_df['frequency']):
    ax[1].text(
        x=i,
        y=value + 0.1,
        s=value,
        ha='center',
    )

# Plot ketiga
desc_monetary_rfm_df = rfm_df.sort_values(by='monetary', ascending=False).head(5)
sns.barplot(
    y='monetary',
    x='customer_id',
    data=desc_monetary_rfm_df,
    palette=colors,
    order=desc_monetary_rfm_df['customer_id'],
    ax=ax[2]
)
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title('By Monetary', loc='center', fontsize=18, pad=10)
ax[2].tick_params(axis='x', labelsize=15)

for i, value in enumerate(desc_monetary_rfm_df['monetary']):
    ax[2].text(
        x=i,
        y=value + 100,
        s=value,
        ha='center',
    )

plt.suptitle('Best Customer Based on RFM Parameters (customer_id)',
             fontsize=20, y=1);

"""- Dari visualisasi data di atas, terlihat beberapa pelanggan yang memiliki performa terbaik berdasarkan ketiga parameter tersebut.

## Save Data Files
"""

all_df.to_csv('all_data.csv', index=False)

"""# CONCLUSION & RECOMMENDATION

**Kesimpulan**

- Berdasarkan hasil **penjualan** dan **revenue** perusahaan dalam beberapa bulan terakhir, terlihat bahwa **bulan Maret** memiliki jumlah pesanan **terbanyak** dengan **117 pesanan**. Namun, terdapat **penurunan** yang signifikan dalam jumlah pesanan pada **bulan Februari, April, Mei,** dan **Oktober**. Hal ini juga berdampak pada pendapatan perusahaan. Untuk mengatasi penurunan ini, perlu dilakukan analisis lebih lanjut terkait faktor-faktor seperti keberadaan kompetitor dan *marketing campaign*.

- Dalam hal penjualan produk, **produk Denim** adalah yang **paling banyak terjual** dengan **527** unit, sementara produk **Mandarin Collar** adalah yang **paling sedikit** terjual dengan **236** unit.

- **Demografi pelanggan** menunjukkan bahwa sebagian besar **pelanggan tidak mengungkapkan informasi** tentang **gender** mereka. Namun, mayoritas pelanggan adalah kelompok **usia dewasa** dengan **416** pelanggan. Pelanggan terbanyak berasal dari state **South Australia**.

- Terakhir, pelanggan melakukan transaksi setidaknya **1 hari yang lalu**, bahkan ada yang melakukan transaksi pada **hari yang sama**. Seorang pelanggan biasanya melakukan **pembelian** sebanyak **5** atau **6 kali** dalam beberapa bulan terakhir. Pelanggan yang paling banyak menghabiskan uang adalah sebesar **AUD 7632** Dollar.

**Rekomendasi**

Berdasarkan hasil ini, perusahaan dapat lebih fokus pada **meningkatkan penjualan** pada bulan-bulan dengan penurunan pesanan. Selain itu, perusahaan juga dapat memperluas **strategi pemasaran** dan **mengidentifikasi peluang baru** untuk menarik lebih banyak pelanggan. Penting juga untuk mempertahankan dan meningkatkan kepuasan pelanggan yang sudah ada dengan memberikan layanan yang baik dan produk-produk yang berkualitas.
"""